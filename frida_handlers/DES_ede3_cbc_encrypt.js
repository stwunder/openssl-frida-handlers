/*
 * Auto-generated by Frida. Please modify to match the signature of DES_ede3_cbc_encrypt.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call DES_ede3_cbc_encrypt.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter(log, args, state) {
    console.log('DES_ede3_cbc_encrypt() intercepted onEnter.');
    console.warn("--- VIOLATION of Rule 7: Use of a Broken or Risky Cryptographic Algorithm. ---");

    this.key1 = new Uint8Array(args[3].readByteArray(128));
    this.key2 = new Uint8Array(args[4].readByteArray(128));
    this.key3 = new Uint8Array(args[5].readByteArray(128));
    this.iv = new Uint8Array(args[6].readByteArray(8));
    this.enc = args[7].toInt32();;

    console.log('key1: ' + this.key1);
    console.log('key2: ' + this.key2);
    console.log('key3: ' + this.key3);
    console.log('iv: ' + this.iv);

    if(typeof state.key1 === 'undefined') {
      state.key1 = [];
    } 
    
    if(typeof state.key2 === 'undefined') {
      state.key2 = [];
    }

    if(typeof state.key3 === 'undefined') {
      state.key3 = [];
    }

    if(typeof state.iv === 'undefined') {
      state.iv = [];
    } 
    
    if(typeof state.enc === 'undefined') {
      state.enc = [];
    }

    state.rule2_violated = -1;
    state.rule3_violated = -1;  
},

  /**
   * Called synchronously when about to return from DES_ede3_cbc_encrypt.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave(log, retval, state) {
    // console.log('DES_ede3_cbc_encrypt() intercepted onLeave.');
    
    if(this.enc == 1) {
      state.iv.forEach((ivElement, index) => {
        if(!(this.iv.length === 0)) {
          var ivIsEqual = false;
          
          for(let i = 0; i < ivElement.length && ivElement.length === this.iv.length; i++) {
            ivIsEqual = ivElement[i] === this.iv[i];
            if(ivIsEqual === false) { 
              break; 
            }
          }

          if(ivIsEqual) {
            state.rule2_violated = index;
            // console.log('rule 2 violated at key element with index: ' + state.rule2_violated);
          }
        }   
      });

      state.key1.forEach((key1Element, index) => {
        var key1IsEqual = false;

        for(let i = 0; i < key1Element.length && this.key1.length > 0; i++) {
          key1IsEqual = key1Element[i] === this.key1[i];
          if(key1IsEqual === false) { 
            break; 
          }
        }

        if(key1IsEqual) {
          state.rule3_violated = index;
          // console.log('rule 3 violated at key1 element with index: ' + state.rule3_violated);
        }
      });

      state.key2.forEach((key2Element, index) => {
        var key2IsEqual = false;

        for(let i = 0; i < key2Element.length && this.key2.length > 0; i++) {
          key2IsEqual = key2Element[i] === this.key2[i];
          
          if(key2IsEqual === false) { 
            break; 
          }
        }
        
        if(key2IsEqual) {
          state.rule3_violated = index;
          // console.log('rule 3 violated at key2 element with index: ' + state.rule3_violated);
        }
      });

      state.key3.forEach((key3Element, index) => {
        var key3IsEqual = false;

        for(let i = 0; i < key3Element.length && this.key3.length > 0; i++) {
          key3IsEqual = key3Element[i] === this.key3[i];

          if(key3IsEqual === false) { 
            break; 
          }
        }

        if(key3IsEqual) {
          state.rule3_violated = index;
          // console.log('rule 3 violated at key3 element with index: ' + state.rule3_violated);
        }        
      });
    }

    if(this.enc == 1) {
      state.key1.push(this.key1);
      state.key2.push(this.key2);
      state.key3.push(this.key3);
      state.iv.push(this.iv);
      state.enc.push(this.enc);
    }

    state.iv.forEach(e => {
      // console.log('iv: ' + e);
    });

    state.enc.forEach(e => {
      // console.log('enc: ' + e);
    });

    if(state.rule2_violated >= 0) {
      console.warn("DES-EDE3-CBC with constant IV called.");
      console.warn("--- VIOLATION of Rule 2: Do not use a non-random IV for CBC encryption. ---");
    }  

    if(state.rule3_violated >= 0 ) {
      console.warn("--- VIOLATION of Rule 3: Do not use constant encryption keys. ---");
    }
  }
}
