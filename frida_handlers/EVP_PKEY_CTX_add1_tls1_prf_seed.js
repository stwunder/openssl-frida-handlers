/*
 * Auto-generated by Frida. Please modify to match the signature of EVP_PKEY_CTX_add1_tls1_prf_seed.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call EVP_PKEY_CTX_add1_tls1_prf_seed.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter(log, args, state) {
    console.log('EVP_PKEY_CTX_add1_tls1_prf_seed() intercepted onEnter.');

    // console.log(
    //   'args[0]: ' + args[0] 
    // + '\nargs[1]: ' + args[1]
    // + '\nargs[2]: ' + args[2]
    // );

    this.ctx = args[0];
    this.seed = args[1];
    this.seedLen = args[2];

    if(typeof state.ctx === 'undefined') {
      state.ctx = []; // (void *)
    } 

    if(typeof state.seed === 'undefined') {
      state.seed = []; // (const unsigned char *)
    }

    if(typeof state.seedLen === 'undefined') {
      state.seedLen = []; // int
    }

    state.rule6_violated = -1;

    // console.log('ctx: ' + this.ctx.toInt32());
    // console.log('seed: ' + this.seed.toInt32());
    // console.log('seedLength: ' + this.seedLen.toInt32());
  },

  /**
   * Called synchronously when about to return from EVP_PKEY_CTX_add1_tls1_prf_seed.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave(log, retval, state) {
    // console.log('EVP_PKEY_CTX_add1_tls1_prf_seed() intercepted onLeave.');

    state.seed.forEach((seedElement, index) => {
      // console.log('ctxElement: ' + ctxElement);

      var currentSeed = new Uint8Array(this.seed.readByteArray(this.seedLen.toInt32()));
      
      // console.log('currentSeed.length: ' + currentSeed.length);
        
      var seedIsEqual = false;

      if(currentSeed.length === 0 && seedElement.length === 0) {
        seedIsEqual = true;
      } else {
        for(let i = 0; i < seedElement.length && currentSeed.length > 0 && seedElement.length === currentSeed.length; i++) {
          seedIsEqual = seedElement[i] === currentSeed[i];
        }
      }

      if(seedIsEqual) {
        state.rule6_violated = index;
        // console.log('rule 6 violated at seed element with index: ' + state.rule6_violated);
      }
    });
    
    state.ctx.push(this.ctx.toInt32());
    state.seed.push(new Uint8Array(this.seed.readByteArray(this.seedLen.toInt32())));
    state.seedLen.push(this.seedLen.toInt32());

    if(state.rule6_violated >= 0) {
      console.warn("EVP_PKEY_CTX_add1_tls1_prf_seed called with static seed: " + currentSeed);
      console.warn("--- VIOLATION of Rule 6: Do not use static seeds to initialize secure random generator. ---");
    }
  }
}
