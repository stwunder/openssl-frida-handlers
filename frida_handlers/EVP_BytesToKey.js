/*
 * Auto-generated by Frida. Please modify to match the signature of EVP_BytesToKey.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call EVP_BytesToKey.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter(log, args, state) {
    console.log('EVP_BytesToKey() intercepted onEnter.');  
    
    this.salt = args[2];
    this.iterations = args[5];

    console.log('iterations: ' + this.iterations.toInt32())

    if(typeof state.salt === 'undefined') {
      state.salt = []; // (const unsigned char *)
    }

    state.rule4_violated = -1;

    // console.log(
    //   'args[0]: ' + args[0] 
    // + '\nargs[1]: ' + args[1]
    // + '\nargs[2]: ' + args[2] 
    // + '\nargs[3]: ' + args[3] 
    // + '\nargs[4]: ' + args[4] 
    // + '\nargs[5]: ' + args[5]
    // + '\nargs[6]: ' + args[6]
    // + '\nargs[7]: ' + args[7]
    // );
  },

  /**
   * Called synchronously when about to return from EVP_BytesToKey.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave(log, retval, state) {
    // console.log('EVP_BytesToKey() intercepted onLeave.'); 

    const saltLength = 8; // salt is either 8 bytes or NULL per definition of EVP_BytesToKey
    const minIterations = 1000;

    state.salt.forEach((saltElement, index) => {
      // console.log('saltElement: ' + saltElement);

      var currentSalt = new Uint8Array(this.salt.readByteArray(saltLength));
      
      //// console.log('currentSalt.length: ' + currentSalt.length);
        
      var saltIsEqual = false;

      if(currentSalt.length === 0 && saltElement.length === 0) {
        saltIsEqual = true;
      } else {
        for(let i = 0; i < saltElement.length && currentSalt.length > 0 && saltElement.length === currentSalt.length; i++) {
          saltIsEqual = saltElement[i] === currentSalt[i];
        }
      }

      if(saltIsEqual) {
        state.rule4_violated = index;
        // console.log('rule 4 violated at salt element with index: ' + state.rule4_violated);
      }
    });

    state.salt.push(new Uint8Array(this.salt.readByteArray(saltLength)));

    state.salt.forEach(e => {
      // console.log('salt: ' + e);
    });

    // console.log('iterations: ' + this.iterations.toInt32());

    if(state.rule4_violated >= 0 ) {
      console.warn("--- VIOLATION of Rule 4: Do not use constant salts for PBE. ---");
    }
   
    if(this.iterations.toInt32() < minIterations) {
      console.warn("--- VIOLATION of Rule 5: Do not use fewer than 1,000 iterations for PBE. ---");
    }
  }
}
