/*
 * Auto-generated by Frida. Please modify to match the signature of EVP_PKEY_CTX_ctrl_uint64.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call EVP_PKEY_CTX_ctrl_uint64.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter(log, args, state) {
    console.log('EVP_PKEY_CTX_ctrl_uint64() intercepted onEnter.');

    // EVP_PKEY_CTX_ctrl_uint64(pctx, -1, EVP_PKEY_OP_DERIVE, EVP_PKEY_CTRL_SCRYPT_N, n)

    // console.log(
      'args[0]: ' + args[0] 
    + '\nargs[1]: ' + args[1]
    + '\nargs[2]: ' + args[2] 
    + '\nargs[3]: ' + args[3] 
    + '\nargs[4]: ' + args[4] 
    );

    this.cmd = args[3];
    this.iterations = args[4];

    // console.log('cmd: ' + this.cmd.toInt32());
    console.log('iterations: ' + this.iterations.toInt32());
  },

  /**
   * Called synchronously when about to return from EVP_PKEY_CTX_ctrl_uint64.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave(log, retval, state) {
    // console.log('EVP_PKEY_CTX_ctrl_uint64() intercepted onLeave.');

    const EVP_PKEY_CTRL_SCRYPT_N = 4106; // HEX: 0x100A
    const minIterations = 1000;

    if(this.cmd.toInt32() === EVP_PKEY_CTRL_SCRYPT_N && this.iterations.toInt32() < minIterations) {
      console.warn("--- VIOLATION of Rule 5: Do not use fewer than 1,000 iterations for PBE. ---");
    }
  }
}
