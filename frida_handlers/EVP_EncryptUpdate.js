/*
 * Auto-generated by Frida. Please modify to match the signature of EVP_EncryptUpdate.
 * This stub is currently auto-generated from manpages when available.
 *
 * For full API reference, see: https://frida.re/docs/javascript-api/
 */

{
  /**
   * Called synchronously when about to call EVP_EncryptUpdate.
   *
   * @this {object} - Object allowing you to store state for use in onLeave.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {array} args - Function arguments represented as an array of NativePointer objects.
   * For example use args[0].readUtf8String() if the first argument is a pointer to a C string encoded as UTF-8.
   * It is also possible to modify arguments by assigning a NativePointer object to an element of this array.
   * @param {object} state - Object allowing you to keep state across function calls.
   * Only one JavaScript function will execute at a time, so do not worry about race-conditions.
   * However, do not use this to store function arguments across onEnter/onLeave, but instead
   * use "this" which is an object for keeping state local to an invocation.
   */
  onEnter(log, args, state) {
    console.log('EVP_EncryptUpdate() intercepted onEnter.');    

    var nid = args[0].readPointer().readPointer().toInt32(); // ctx->cipher->nid
    // console.log('nid: ' + nid);

    /**
     * Rule 1: Do not use ECB mode for encryption.
     */

    var ecbCiphers = { 
      418: "aes_128_ecb", 422: "aes_192_ecb", 426: "aes_256_ecb",
      1065: "aria_128_ecb", 1070: "aria_192_ecb", 1075: "aria_256_ecb", 
      754: "camellia_128_ecb", 755: "camellia_192_ecb", 756: "camellia_256_ecb",
      29: "des_ecb", 32: "des_ede/des_ede_ecb", 33: "des_ede3/des_ede3_ecb",
      92: "bf_ecb", 36: "idea_ecb", 109: "cast5_ecb", 776: "seed_ecb", 1133: "sm4_ecb"
    };

    if(nid in ecbCiphers === true) {
      console.warn("ECB mode with algorithm called: " + ecbCiphers[nid]);
      console.warn("--- VIOLATION of Rule 1: Do not use ECB mode for encryption. ---");
    }

    /**
     * Rule 7: Use of a Broken or Risky Cryptographic Algorithm.
     */

    var insecureSymmetricCiphers = { 
      37: "rc2_cbc", 38: "rc2_ecb", 39: "rc2_cfb/rc2_cfb64", 40: "rc2_ofb", 98: "rc2_40_cbc", 166: "rc2_64_cbc", 
      5: "rc4", 97: "rc4_40", 915: "rc4_hmac_md5", 
      120: "rc5_32_12_16_cbc", 121: "rc5_32_12_16_ecb", 122: "rc5_32_12_16_cfb64", 123: "rc5_32_12_16_ofb",
      29: "des_ecb", 30: "des_cfb", 31: "des_cbc", 32: "des_ede/des_ede_ecb", 33: "des_ede3/des_ede3_ecb", 43: "des_ede_cbc", 44: "des_ede3_cbc", 45: "des_ofb", 60: "des_ede_cfb/des_ede_cfb64", 61: "des_ede3_cfb/des_ede3_cfb64", 62: "des_ede_ofb", 63: "des_ede3_ofb", 246: "des_ede3_wrap", 656: "des_cfb1", 657: "des_cfb8", 658: "des_ede3_cfb1", 659: "des_ede3_cfb8",
      91: "bf_cbc", 92: "bf_ecb", 93: "bf_cfb/bf_cfb64", 94: "bf_ofb",
      34: "idea_cbc", 35: "idea_cfb/idea_cfb64", 36: "idea_ecb", 46: "idea_ofb"
    };

    if(nid in insecureSymmetricCiphers === true) {
      console.warn("Insecure symmetric encryption algorithm called: " + insecureSymmetricCiphers[nid]);
      console.warn("--- VIOLATION of Rule 7: Use of a Broken or Risky Cryptographic Algorithm. ---");
    }
  },

  /**
   * Called synchronously when about to return from EVP_EncryptUpdate.
   *
   * See onEnter for details.
   *
   * @this {object} - Object allowing you to access state stored in onEnter.
   * @param {function} log - Call this function with a string to be presented to the user.
   * @param {NativePointer} retval - Return value represented as a NativePointer object.
   * @param {object} state - Object allowing you to keep state across function calls.
   */
  onLeave(log, retval, state) {

  }
}